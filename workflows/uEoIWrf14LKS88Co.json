{
  "createdAt": "2025-07-16T09:24:33.620Z",
  "updatedAt": "2025-07-22T06:59:01.402Z",
  "id": "uEoIWrf14LKS88Co",
  "name": "Backup workflows to GitHub",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {},
      "id": "44049842-8e62-4bec-9772-7e71f738573c",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        288,
        64
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "95e6f83c-f74a-4384-9b7c-e70f9af5e34c",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        688,
        160
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "ap0erZwL76WsrTDU",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c0f4cbb4-19ca-4bac-91b3-ea772729aaa3",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        880,
        160
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "4307f6d2-597e-4c18-82db-b911ca9a199f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        288,
        272
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "94904217-d0c9-409a-87a8-63b3e607dea9",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -208,
        -16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "9338da4f-e616-4f50-a35b-03ee019bde1e",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        240,
        -16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$workflow.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "input": "={{ $json }}"
          },
          "matchingColumns": [
            "input"
          ],
          "schema": [
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1104,
        208
      ],
      "id": "b8cad4d4-886d-4999-a49b-7f853a6e786c",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "input",
              "type": "object"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -128,
        848
      ],
      "id": "cab58639-d05c-4d6a-936a-40524abf2043",
      "name": "Execute Workflow Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=engineering-justpro"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=n8n-backup"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "=workflows"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "4d602053-4847-4629-8d1f-b8aab4cf1e34",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        288,
        848
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').item.json.repo_path }}/{{ $('Execute Workflow Trigger').item.json.input.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "6d598b03-cdc9-40dd-8656-1922f58d7537",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        288,
        560
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "7e25f89a-b7b4-42e3-816e-7b9fd0c83368",
      "credentials": {
        "githubApi": {
          "id": "2KGdWhJbDRdP43AA",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "6c2e2e7c-d8c9-4e33-859f-dd4dcad42722",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        880,
        832
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}/{{ $('Execute Workflow Trigger').item.json.input.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('Execute Workflow Trigger').item.json.input.name}} ({{$json.github_status}})"
      },
      "id": "0a9e0366-14cc-4d8e-b1af-44d22d6dc35d",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1520,
        832
      ],
      "typeVersion": 1,
      "webhookId": "d82e1843-c75a-4dc0-9d8e-8de334d79dd8",
      "credentials": {
        "githubApi": {
          "id": "2KGdWhJbDRdP43AA",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}/{{ $('Execute Workflow Trigger').item.json.input.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('Execute Workflow Trigger').item.json.input.name}} ({{$json.github_status}})"
      },
      "id": "b1ca04ee-5c7f-42b6-aab2-4c082516e24f",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1520,
        1024
      ],
      "typeVersion": 1,
      "webhookId": "a2a5f392-9085-4171-adbd-22b95700bdbe",
      "credentials": {
        "githubApi": {
          "id": "2KGdWhJbDRdP43AA",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {},
      "id": "9bcdd2b3-bee9-456a-870f-a5dd725a7274",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1312,
        1024
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "dad38d4b-774b-49e9-86b9-38073729a5ee",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1312,
        832
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "3ae9fe28-df1f-4a1d-8096-28f022fe6aa2",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1312,
        672
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "8d148c17-6739-4f1c-84ad-9a13c3008820",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1088,
        832
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json.input;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json.input;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "c42e6878-ee0d-4b6f-8cb1-7a82ac61503f",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        688,
        832
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "27fd3b4e-b153-4afe-83dd-646430da06ea",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        480,
        832
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "82271fe7-1302-4c76-a88e-828e37fba0bd",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        480,
        560
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "ab2c3d3d-92c6-47f0-9223-dadb0b5a75de",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        720,
        544
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "7ed8636e-424e-44d4-8aa0-faefadbe1952",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1760,
        672
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 732,
        "width": 2091,
        "color": 6
      },
      "id": "b190c85d-21fc-4b7f-9fd7-29cc9ddde5f8",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -208,
        464
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        []
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "46c2adb5-0629-4d5c-b22d-43dc00542878",
  "triggerCount": 0,
  "tags": []
}